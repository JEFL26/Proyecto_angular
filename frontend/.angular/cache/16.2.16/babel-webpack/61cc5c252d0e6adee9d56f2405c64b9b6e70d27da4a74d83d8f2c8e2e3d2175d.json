{"ast":null,"code":"import { __decorate } from \"tslib\";\n// frontend/src/app/components/login/login.component.ts\nimport { Component } from '@angular/core';\nexport let LoginComponent = class LoginComponent {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n    // Modelo del formulario\n    this.loginData = {\n      email: '',\n      password: ''\n    };\n    // Estados del componente\n    this.loading = false;\n    this.errorMessage = '';\n  }\n  /**\n   * Maneja el submit del formulario de login\n   */\n  onLogin() {\n    // Validaciones básicas\n    if (!this.loginData.email || !this.loginData.password) {\n      this.errorMessage = 'Por favor completa todos los campos';\n      return;\n    }\n    this.loading = true;\n    this.errorMessage = '';\n    // Llamada al servicio de autenticación\n    this.authService.login(this.loginData).subscribe({\n      next: response => {\n        // Éxito: redirigir al home\n        this.loading = false;\n        this.router.navigate(['/home']);\n      },\n      error: error => {\n        // Error: mostrar mensaje\n        this.loading = false;\n        if (error.status === 401) {\n          this.errorMessage = 'Email o contraseña incorrectos';\n        } else {\n          this.errorMessage = 'Error al iniciar sesión. Intenta nuevamente';\n        }\n      }\n    });\n  }\n  /**\n   * Navega a la página de registro\n   */\n  goToRegister() {\n    this.router.navigate(['/register']);\n  }\n  /**\n   * Navega al home\n   */\n  goToHome() {\n    this.router.navigate(['/home']);\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);","map":{"version":3,"names":["Component","LoginComponent","constructor","authService","router","loginData","email","password","loading","errorMessage","onLogin","login","subscribe","next","response","navigate","error","status","goToRegister","goToHome","__decorate","selector","templateUrl","styleUrls"],"sources":["/home/feliban26/estudio_angular/proyecto_reservas/frontend/src/app/components/login/login.component.ts"],"sourcesContent":["// frontend/src/app/components/login/login.component.ts\r\nimport { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { UserLogin } from '../../models/user.model';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent {\r\n  // Modelo del formulario\r\n  loginData: UserLogin = {\r\n    email: '',\r\n    password: ''\r\n  };\r\n\r\n  // Estados del componente\r\n  loading = false;\r\n  errorMessage = '';\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  /**\r\n   * Maneja el submit del formulario de login\r\n   */\r\n  onLogin(): void {\r\n    // Validaciones básicas\r\n    if (!this.loginData.email || !this.loginData.password) {\r\n      this.errorMessage = 'Por favor completa todos los campos';\r\n      return;\r\n    }\r\n\r\n    this.loading = true;\r\n    this.errorMessage = '';\r\n\r\n    // Llamada al servicio de autenticación\r\n    this.authService.login(this.loginData).subscribe({\r\n      next: (response) => {\r\n        // Éxito: redirigir al home\r\n        this.loading = false;\r\n        this.router.navigate(['/home']);\r\n      },\r\n      error: (error) => {\r\n        // Error: mostrar mensaje\r\n        this.loading = false;\r\n        if (error.status === 401) {\r\n          this.errorMessage = 'Email o contraseña incorrectos';\r\n        } else {\r\n          this.errorMessage = 'Error al iniciar sesión. Intenta nuevamente';\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Navega a la página de registro\r\n   */\r\n  goToRegister(): void {\r\n    this.router.navigate(['/register']);\r\n  }\r\n\r\n  /**\r\n   * Navega al home\r\n   */\r\n  goToHome(): void {\r\n    this.router.navigate(['/home']);\r\n  }\r\n}"],"mappings":";AAAA;AACA,SAASA,SAAS,QAAQ,eAAe;AAUlC,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAWzBC,YACUC,WAAwB,EACxBC,MAAc;IADd,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;IAZhB;IACA,KAAAC,SAAS,GAAc;MACrBC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE;KACX;IAED;IACA,KAAAC,OAAO,GAAG,KAAK;IACf,KAAAC,YAAY,GAAG,EAAE;EAKd;EAEH;;;EAGAC,OAAOA,CAAA;IACL;IACA,IAAI,CAAC,IAAI,CAACL,SAAS,CAACC,KAAK,IAAI,CAAC,IAAI,CAACD,SAAS,CAACE,QAAQ,EAAE;MACrD,IAAI,CAACE,YAAY,GAAG,qCAAqC;MACzD;;IAGF,IAAI,CAACD,OAAO,GAAG,IAAI;IACnB,IAAI,CAACC,YAAY,GAAG,EAAE;IAEtB;IACA,IAAI,CAACN,WAAW,CAACQ,KAAK,CAAC,IAAI,CAACN,SAAS,CAAC,CAACO,SAAS,CAAC;MAC/CC,IAAI,EAAGC,QAAQ,IAAI;QACjB;QACA,IAAI,CAACN,OAAO,GAAG,KAAK;QACpB,IAAI,CAACJ,MAAM,CAACW,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;MACjC,CAAC;MACDC,KAAK,EAAGA,KAAK,IAAI;QACf;QACA,IAAI,CAACR,OAAO,GAAG,KAAK;QACpB,IAAIQ,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;UACxB,IAAI,CAACR,YAAY,GAAG,gCAAgC;SACrD,MAAM;UACL,IAAI,CAACA,YAAY,GAAG,6CAA6C;;MAErE;KACD,CAAC;EACJ;EAEA;;;EAGAS,YAAYA,CAAA;IACV,IAAI,CAACd,MAAM,CAACW,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC;EACrC;EAEA;;;EAGAI,QAAQA,CAAA;IACN,IAAI,CAACf,MAAM,CAACW,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;EACjC;CACD;AA7DYd,cAAc,GAAAmB,UAAA,EAL1BpB,SAAS,CAAC;EACTqB,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACWtB,cAAc,CA6D1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}