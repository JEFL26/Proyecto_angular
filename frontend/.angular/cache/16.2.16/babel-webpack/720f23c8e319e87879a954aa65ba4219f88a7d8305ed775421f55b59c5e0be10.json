{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    // URL base de tu backend - CÁMBIALA según tu configuración\n    this.apiUrl = 'http://localhost:8000';\n    // BehaviorSubject: mantiene el estado del login\n    // Si hay token, el usuario está logueado\n    this.isAuthenticatedSubject = new BehaviorSubject(this.hasToken());\n    this.isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\n  }\n  /**\n   * Verifica si existe un token en localStorage\n   */\n  hasToken() {\n    return !!localStorage.getItem('access_token');\n  }\n  /**\n   * Registra un nuevo usuario\n   * POST a /auth/register\n   */\n  register(user) {\n    return this.http.post(`${this.apiUrl}/auth/register`, user);\n  }\n  /**\n   * Inicia sesión\n   * POST a /auth/login\n   * Guarda el token en localStorage si es exitoso\n   */\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/auth/login`, credentials).pipe(tap(response => {\n      // Guardar token en el navegador\n      localStorage.setItem('access_token', response.access_token);\n      // Actualizar estado de autenticación\n      this.isAuthenticatedSubject.next(true);\n    }));\n  }\n  /**\n   * Cierra sesión\n   * Elimina el token y actualiza el estado\n   */\n  logout() {\n    localStorage.removeItem('access_token');\n    this.isAuthenticatedSubject.next(false);\n  }\n  /**\n   * Obtiene el token guardado\n   */\n  getToken() {\n    return localStorage.getItem('access_token');\n  }\n  /**\n   * Verifica si el usuario está autenticado\n   */\n  isLoggedIn() {\n    return this.hasToken();\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","AuthService","constructor","http","apiUrl","isAuthenticatedSubject","hasToken","isAuthenticated$","asObservable","localStorage","getItem","register","user","post","login","credentials","pipe","response","setItem","access_token","next","logout","removeItem","getToken","isLoggedIn","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/feliban26/estudio_angular/proyecto_reservas/frontend/src/app/services/auth.service.ts"],"sourcesContent":["// frontend/src/app/services/auth.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { UserRegister, UserLogin, AuthResponse, MessageResponse } from '../models/user.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  // URL base de tu backend - CÁMBIALA según tu configuración\r\n  private apiUrl = 'http://localhost:8000';\r\n  \r\n  // BehaviorSubject: mantiene el estado del login\r\n  // Si hay token, el usuario está logueado\r\n  private isAuthenticatedSubject = new BehaviorSubject<boolean>(this.hasToken());\r\n  public isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  /**\r\n   * Verifica si existe un token en localStorage\r\n   */\r\n  private hasToken(): boolean {\r\n    return !!localStorage.getItem('access_token');\r\n  }\r\n\r\n  /**\r\n   * Registra un nuevo usuario\r\n   * POST a /auth/register\r\n   */\r\n  register(user: UserRegister): Observable<MessageResponse> {\r\n    return this.http.post<MessageResponse>(`${this.apiUrl}/auth/register`, user);\r\n  }\r\n\r\n  /**\r\n   * Inicia sesión\r\n   * POST a /auth/login\r\n   * Guarda el token en localStorage si es exitoso\r\n   */\r\n  login(credentials: UserLogin): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${this.apiUrl}/auth/login`, credentials)\r\n      .pipe(\r\n        tap(response => {\r\n          // Guardar token en el navegador\r\n          localStorage.setItem('access_token', response.access_token);\r\n          // Actualizar estado de autenticación\r\n          this.isAuthenticatedSubject.next(true);\r\n        })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Cierra sesión\r\n   * Elimina el token y actualiza el estado\r\n   */\r\n  logout(): void {\r\n    localStorage.removeItem('access_token');\r\n    this.isAuthenticatedSubject.next(false);\r\n  }\r\n\r\n  /**\r\n   * Obtiene el token guardado\r\n   */\r\n  getToken(): string | null {\r\n    return localStorage.getItem('access_token');\r\n  }\r\n\r\n  /**\r\n   * Verifica si el usuario está autenticado\r\n   */\r\n  isLoggedIn(): boolean {\r\n    return this.hasToken();\r\n  }\r\n}"],"mappings":"AAGA,SAAqBA,eAAe,QAAQ,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;;;AAMpC,OAAM,MAAOC,WAAW;EAStBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IARxB;IACQ,KAAAC,MAAM,GAAG,uBAAuB;IAExC;IACA;IACQ,KAAAC,sBAAsB,GAAG,IAAIN,eAAe,CAAU,IAAI,CAACO,QAAQ,EAAE,CAAC;IACvE,KAAAC,gBAAgB,GAAG,IAAI,CAACF,sBAAsB,CAACG,YAAY,EAAE;EAE7B;EAEvC;;;EAGQF,QAAQA,CAAA;IACd,OAAO,CAAC,CAACG,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAC/C;EAEA;;;;EAIAC,QAAQA,CAACC,IAAkB;IACzB,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAkB,GAAG,IAAI,CAACT,MAAM,gBAAgB,EAAEQ,IAAI,CAAC;EAC9E;EAEA;;;;;EAKAE,KAAKA,CAACC,WAAsB;IAC1B,OAAO,IAAI,CAACZ,IAAI,CAACU,IAAI,CAAe,GAAG,IAAI,CAACT,MAAM,aAAa,EAAEW,WAAW,CAAC,CAC1EC,IAAI,CACHhB,GAAG,CAACiB,QAAQ,IAAG;MACb;MACAR,YAAY,CAACS,OAAO,CAAC,cAAc,EAAED,QAAQ,CAACE,YAAY,CAAC;MAC3D;MACA,IAAI,CAACd,sBAAsB,CAACe,IAAI,CAAC,IAAI,CAAC;IACxC,CAAC,CAAC,CACH;EACL;EAEA;;;;EAIAC,MAAMA,CAAA;IACJZ,YAAY,CAACa,UAAU,CAAC,cAAc,CAAC;IACvC,IAAI,CAACjB,sBAAsB,CAACe,IAAI,CAAC,KAAK,CAAC;EACzC;EAEA;;;EAGAG,QAAQA,CAAA;IACN,OAAOd,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAC7C;EAEA;;;EAGAc,UAAUA,CAAA;IACR,OAAO,IAAI,CAAClB,QAAQ,EAAE;EACxB;;;uBAhEWL,WAAW,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAX3B,WAAW;MAAA4B,OAAA,EAAX5B,WAAW,CAAA6B,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}